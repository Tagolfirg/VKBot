package ru.brainrtp.vk.bot;

import com.petersamokhin.bots.sdk.clients.User;
import com.petersamokhin.bots.sdk.objects.Message;

import java.util.HashMap;

/**
 * –°–æ–∑–¥–∞–Ω–æ 22.12.17
 */

class Listeners {

    int superadmin = 147906281;
    private static HashMap<Integer, Long> cooldowns = new HashMap<Integer, Long>();
    private static int cooldownTime = 5;
    static int latestChat = 0;


    static void onChat(User user){

        //TODO: –ù–∏–∂–µ –Ω–∞–ø–∏—Å–∞–Ω —Å–ø–æ—Å–æ–± —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏. v0.14-alpha
        /*
        user.onMessage(message -> {
            if (message.isMessageFromChat()) {

                // Get chat id
                int chatIdLong = message.getChatIdLong(); // 2000000011
                int chatId = message.chatId();            // 11
                int sender = message.authorId();          // 62802565

                // Handle message, it's from chat
                new Message()
                        .from(user)
                        .to(chatIdLong)
                        .text("Hello, chat!")
                        .send();

            } else {

                // Handle message that not from chat
                new Message()
                        .from(user)
                        .to(message.authorId())
                        .text("Sorry, I will work only in chats.")
                        .send();
            }
        });

        user.onChatMessage(message -> {
            // Handle message, it's from chat
        });
        */

        user.onMessage(message -> {
            if (!Student.students.containsKey(message.authorId())){
                new Student(message.authorId());
            }
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            Main.log(message.getText(), Student.getStudent(message.authorId()).getFirstName(), message.authorId());
            int senderId = message.authorId();

            if (cooldowns.containsKey(senderId)) {
                long secondsLeft = ((cooldowns.get(senderId) / 1000) + cooldownTime) - (System.currentTimeMillis() / 1000);
                if (secondsLeft > 0)
                    return;
            }
            cooldowns.put(senderId, System.currentTimeMillis());
            latestChat = message.authorId();
            String first = message.getText().toLowerCase().split(" ")[0];
            switch (first){
                case "–∏–Ω—Ñ–æ": {
                    new Message()
                            .from(user)
                            .to(message.authorId())
                            .text("–í–∞—à–µ –∏–º—è: " + Student.getStudent(message.authorId()).getFirstName()
                                    + "\n–í–∞—à —Å—Ç–∞—Ç—É—Å: " + getGroup(Student.getStudent(message.authorId()).getPermission().get(0)))
                            .send();
                    break;
                }



                /*
                * TODO:
                * –î–æ–¥–µ–ª–∞—Ç—å —Å—Ç–∞—Ä–æ—Å—Ç—É:
                * 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î, –µ—Å–ª–∏ –¥–∞, —Ç–æ:
                *    - "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ—Å—Ç —Å—Ç–∞—Ä–æ—Å—Ç—ã group-–π –≥—Ä—É–ø–ø—ã" //–ï—Å–ª–∏ allowed - false
                *    - "–í—ã —É–∂–µ –∏–º–µ–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ä–æ—Å—Ç—ã group-–π –≥—Ä—É–ø–ø—ã :-)" //–ï—Å–ª–∏ allowed - true –∏ id_vk == message.authorId()
                *    - "–°—Ç–∞—Ä–æ—Å—Ç–∞ group-–π –≥—Ä—É–ø–ø—ã - [id123123|–°—Ç–∞–Ω–∏—Å–ª–∞–≤]" //–ï—Å–ª–∏ allowed - true –∏ id_vk != message.authorId()
                * 2) –î–æ–ø–∏—Å–∞—Ç—å —Ö—É–π–Ω—é –ø–æ –æ—Ç–∫–∞–∑—É (–∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–∞–∑–∞–ª–∞), –Ω–∞–ø—Ä–∏–º–µ—Ä:
                *    - "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –Ω–∞–º –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –í—ã –Ω–µ —Å—Ç–∞—Ä–æ—Å—Ç–∞ group-–π –≥—Ä—É–ø–ø—ã ü§î"
                */
                
                case "—Å—Ç–∞—Ä–æ—Å—Ç–∞": {
                    if (Main.sql.select(senderId) != null && Main.sql.select(senderId).get(2).equalsIgnoreCase("1")){
                        new Message().from(user).to(senderId).text("–í—ã —É–∂–µ —Å—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã " + Main.sql.select(senderId).get(1) + ".").send();
                        break;
                    }
                    if (Main.sql.select(senderId) != null) {
                        new Message().from(user).to(senderId).text("–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Å—Ç–∞—Ä–æ—Å—Ç—É –≥—Ä—É–ø–ø—ã " + Main.sql.select(senderId).get(1) + "!\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫.").send();
                        break;
                    }
                    try {
                        int num = Integer.parseInt(message.getText().split(" ")[1]);
                        Main.sql.insert(message.authorId(), num, false);
                        new Message()
                                .from(user)
                                .to(message.authorId())
                                .text(Student.getStudent(message.authorId()).getFirstName()
                                        + ", –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ—Å—Ç —Å—Ç–∞—Ä–æ—Å—Ç—ã –ø—Ä–∏–Ω—è—Ç–∞!"
                                        + "\n–í–∞—Å –æ–ø–æ–≤–µ—Å—Ç—è—Ç, –∫–æ–≥–¥–∞ –≤–∞–º –≤—ã–¥–∞–¥—É—Ç —Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ä–æ—Å—Ç—ã")
                                .send();

                    } catch (Exception e) {
                        new Message()
                                .from(user)
                                .to(message.authorId())
                                .text("–ü—Ä–∏–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ —Ç–∞–∫–æ–º—É –≤–∏–¥—É:\n"
                                        + "—Å—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø–∞\n"
                                        + "–ù–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç–∞—Ä–æ—Å—Ç–∞ 202")
                                .send();
                    }
                    break;
                }
//                case "–≥–æ–ª–æ—Å": {
//                    new Message()
//                            .from(user)
//                            .to(message.authorId())
//                            .text("–í–∞—à–µ –∏–º—è: " + Student.getStudent(message.authorId()).getFirstName()
//                                    + "\n–í–∞—à —Å—Ç–∞—Ç—É—Å: " + getGroup(Student.getStudent(message.authorId()).getPermission().get(0)))
//                            .send();
//                    break;
//                }
                default: {
                    new Message()
                            .from(user)
                            .to(message.authorId())
                            .text("–ü—Ä–∏–≤–µ—Ç, [id" + message.authorId() + "|" + Student.getStudent(message.authorId()).getFirstName()+ "]. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –∑–∞–Ω—è—Ç.")
                            .send();
                    break;
                }}});
        user.enableTyping(true);

    }

    private static String getGroup(String permission){
        if (permission.equals("admin")){
            return "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä";
        } else if (permission.equalsIgnoreCase("captain")) {
            return "–°—Ç–∞—Ä–æ—Å—Ç–∞";
        } else {
            return "–°—Ç—É–¥–µ–Ω—Ç";
        }
    }
}
